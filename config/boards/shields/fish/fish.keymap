// デフォルトキーマップ（大西配列、Win優先、ANSI方式）
// キーマップを更新する方法は https://o24.works/fish/guide を参照
// 視覚的に編集するには https://o24.works/fish/editor を参照


// 定義を呼んでくる
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>


// 特殊入力の挙動を調整できる

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <225>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <150>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <200>;
};

&sk {
};

&sl {
};

&caps_word {
};

&key_repeat {
};


#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  INT1         // (backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

/ {
    // 独自の入力を定義できる（上級者向け）

    behaviors {
    };

    macros {
        y_a: y_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp Y &kp A>
                ;
            };
      
        y_u: y_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp Y &kp U>
                ;
            };

        y_e: y_e {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp Y &kp E>
                ;
            };

        y_o: y_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp Y &kp O>
                ;
            };

        x_a: x_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp A>
                ;
            };

        x_i: x_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp I>
                ;
            };

        x_u: x_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp U>
                ;
            };

        x_e: x_e {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp E>
                ;
            };

        x_o: x_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp O>
                ;
            };

        x_y_a: x_y_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp Y &kp A>
                ;
            };

        x_y_u: x_y_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp Y &kp U>
                ;
            };

        x_y_o: x_y_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp X &kp Y &kp O>
                ;
            };

        n_n: n_n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp N &kp N>
                ;
          };
    };

    conditional_layers {
    };


    // 複数キーの同時押しに特別の入力を設定できる
    // キー番号早見表：
    //       0  1  2  3     4  5  6  7
    // 8  9 10 11 12 13    14 15 16 17 18 19
    //   20 21 22 23          24 25 26 27
    //            28 29    30 31

    combos {
        compatible = "zmk,combos";
        timeout-ms = <100>;
        require-prior-idle-ms = <150>;

        combo_lang2 {
            key-positions = <11 12>;
            bindings = <&kp LANG2>;
        };

        combo_lang1 {
            key-positions = <15 16>;
            bindings = <&kp LANG1>;
        };

        combo_reset_L {
            key-positions = <3 8 13>;
            bindings = <&bootloader>;
        };

        combo_reset_R {
            key-positions = <4 14 19>;
            bindings = <&bootloader>;
        };

        combo_studio_unlock {
            key-positions = <20 21 22 23>;
            bindings = <&studio_unlock>;
        };

        jp_zkhk {
            key-positions = <29 30>;
            bindings = <&kp JP_ZKHK>;
        };

        jp_mhen {
            key-positions = <28 31>;
            bindings = <&kp JP_MHEN>;
        };

        jp_henk1 {
            key-positions = <28 30>;
            bindings = <&kp JP_HENK>;
        };

        jp_henk2 {
            key-positions = <29 31>;
            bindings = <&kp JP_HENK>;
        };

        sk_shift {
            key-positions = <12 15>;
            bindings = <&sk LSHIFT>;
        };

        sk_ctrl {
            key-positions = <11 16>;
            bindings = <&sk LCTRL>;
        };

        sk_alt {
            key-positions = <10 17>;
            bindings = <&sk LALT>;
        };

        sk_gui {
            key-positions = <9 18>;
            bindings = <&sk LGUI>;
        };
    };
};
    

    // キーに入力を割り当てる
    // 型（&...）は https://zmk.dev/docs/behaviors/... を参照
    // キーコードは https://zmk.dev/docs/codes/... を参照

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            bindings = <
                            &macro_y_u      &kp U         &kp MINUS       &mt LSHIFT JP_QMARK               &mt LALT JP_LBKT     &kp W           &kp N       &kp M       
&kp LEFT    &kp E           &kp I         &kp A           &kp O           &mt LCTRL COMMA                   &mt LGUI JP_RBKT     &kp K           &kp T       &kp S       &kp R       &kp RIGHT       
            &macro_y_e      &macro_n_n    &macro_y_a      &macro_y_o                                                             &kp H           &kp Y       &kp P       &kp F       
                                                          &lt 1 BSPC      &lt 3 RET                         &lt 3 TAB            &lt 2 SPACE 
            >;
        };

        layer_voiced1 {
            bindings = <
                              &macro_x_y_u      &macro_x_u        &kp JP_TILDE    &mt LSHIFT JP_EXCL       &mt LALT JP_LPAR    &kp Q       &macro_n_n    &kp J      
&kp LEFT    &macro_x_e        &macro_x_i        &macro_x_a        &macro_x_o      &mt LCTRL DOT            &mt LGUI JP_RPAR    &kp G       &kp D         &kp Z     &kp L    &kp RIGHT
            &kp HOME          &kp END           &macro_x_y_a      &macro_x_y_o                                                 &kp B       &kp X         &kp C     &kp V    
                                            　                    &none           &none                    &tog 5              &tog 4 
            >;
        };

        layer_voiced2 {
            bindings = <
                            &macro_x_y_u      &macro_x_u        &kp JP_TILDE    &mt LSHIFT JP_EXCL        &mt LALT JP_LPAR    &kp Q       &macro_n_n    &kp J      
&kp LEFT    &macro_x_e      &macro_x_i        &macro_x_a        &macro_x_o      &mt LCTRL DOT             &mt LGUI JP_RPAR    &kp G       &kp D         &kp Z     &kp L    &kp RIGHT
            &kp HOME        &kp END           &macro_x_y_a      &macro_x_y_o                                                  &kp B       &kp X         &kp C     &kp V    
                                              &tog 4            &tog 5                                    &none               &none 
            >;
        };

        layer_num {
            bindings = <
                         &kp JP_ASTRK  &kp JP_AMPS   &kp JP_CARET  &mt LSHIFT JP_PLUS        &mt LALT COMMA    &kp N1      &kp N2      &kp N3    
&kp LEFT    &kp JP_DQT   &kp JP_SQT    &kp JP_UNDER  &kp JP_AT     &mt LCTRL MINUS           &mt LGUI DOT      &kp N4      &kp N5      &kp N6   &kp N0    &kp RIGHT  
            &kp JP_LT    &kp JP_RT     &kp JP_PRCNT  &kp JP_EQUAL                                              &kp N7      &kp N8      &kp N9   &kp FSLH 
                                                     &kp JP_YEN    &none                     &none             &kp JP_YEN       
            >;
        };

        layer_signs {
            bindings = <
                           &kp C_VOL_DN    &kp UP      &kp C_VOL_UP    &kp PG_UP          &kp LBRC     &kp JP_BSLH   &kp JP_PIPE &kp JP_GRAVE       
&tog 4      &kp PSCRN      &kp LEFT        &kp DOWN    &kp RIGHT       &kp PG_DN          &kp RBRC     &kp JP_HASH   &kp JP_DLLR &kp JP_COLON   &kp SEMI     &tog 4
            &kp CAPS       &kp HOME        &kp LGUI    &kp END                                         &kp LC(Z)     &kp LC(X)   &kp LC(C)      &kp LC(V)       
                                                       &kp BSPC        &kp RT             &kp TAB      &kp SPACE 
            >;
        };

        layer_qwerty {
            bindings = <
                  &kp W    &kp E    &kp R      &kp T                   &kp Y              &kp U    &kp I       &kp O      
&kp Q   &kp A     &kp S    &kp D    &kp F      &kp G                   &kp H              &kp J    &kp K       &kp L     & kp P     &kp BSPC 
        &kp Z     &kp X    &kp C    &kp V                                                 &kp M    &kp COMMA   &kp DOT   &lt 6 RET    
                                    &kp B      &mt LCTRL TAB           &mt LSHIFT SPACE   &kp N 
            >;
        };

        layer_qwerty2 {
            bindings = <
                 &none    &none    &none    &none              &none     &none    &none   &none      
&none   &none    &none    &none    &none    &none              &none     &none    &none   &none   &none   &tog 5 
        &none    &none    &none    &none                                 &none    &none   &none   &none    
                                   &none    &none              &none     &none 
            >;
        };
    };
};
